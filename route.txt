这个txt文档是用来详细记录每一次commit中做的修改内容, 以及各branch分支所做的内容不同之处

commit ID: 66cd08b2e8eefb463c7336960768282774d00842
《C++ 新经典——Linux C++通信架构实战》4.1 设计nginx初步的开发目录结构, 并学习makefile编写, 并阅读样例代码
代码从读取配置文件开始, 使用单例模式创建获取配置文件的类, 并自定义配置文件读取函数及字符串处理函数
C++单例模式比较有意思, 我们来总结一下
1. C++11之后可以使用局部静态变量创建单例
2. C++11之后可以使用call_once函数
3. 模板化局部静态变量构造单例

commit ID: 6b35f55a05373a0cbe3b0e6612e3c9a96e1a18e5
使用加锁的Lazy Load方式书写单例模式, 因为读取配置文件发生在主程序启动的开始, 所以实际并不存在多线程竞争的情况, 仅为学习书写POSIX标准下的加锁方式 

commit ID: 6b35f55a05373a0cbe3b0e6612e3c9a96e1a18e5
创建了3个分支但并不合并, 分支cpp11_call_once测试使用call_once函数书写单例模式, cpp11_static分支测试使用类局部静态变量的方式书写单例模式, 因为cpp11提供的2中新模式会自动管理内存或者使用&引用方式创建并返回单例实例, 因此不涉及内存管理问题, 无需考虑单例实例的内存释放

commit ID: ac9ef6986034a26f619f8b501d9c8c685a1c75c5
自定义加载配置信息文件的方式, 对于文件流的处理简单直接, 但应当学习、明白配置文件在大型工程项目中的作用, 同时了解CCF配置文件格式
项目投入实际应用, 应当采用Json、XML等标准格式并结合优秀的相关C语言库进行配置文件的读取、写入

commit ID: 7644b171365768833d9f3357eeea487260d86132
按照书籍代码提供的Makefile代码进行书写，同时重新书写李云的《驾驭Makefile》，之后可能会对Makefile代码进行修订，不再单独在git中展示修订差异，可以学习cmake、xmake代替使用make+makefile的编译控制模式
